/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.access.Access', null, global);
goog.exportSymbol('proto.access.ColumnAccess', null, global);
goog.exportSymbol('proto.access.LoginRequest', null, global);
goog.exportSymbol('proto.access.LogoutRequest', null, global);
goog.exportSymbol('proto.access.RecordAccess', null, global);
goog.exportSymbol('proto.access.Role', null, global);
goog.exportSymbol('proto.access.RoleRequest', null, global);
goog.exportSymbol('proto.access.Session', null, global);
goog.exportSymbol('proto.access.TableAccess', null, global);
goog.exportSymbol('proto.access.TableAccess.AccessTypeRule', null, global);
goog.exportSymbol('proto.access.UserRoles', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.RoleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.RoleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.RoleRequest.displayName = 'proto.access.RoleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.LoginRequest.displayName = 'proto.access.LoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.LogoutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.LogoutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.LogoutRequest.displayName = 'proto.access.LogoutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.UserRoles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.access.UserRoles.repeatedFields_, null);
};
goog.inherits(proto.access.UserRoles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.UserRoles.displayName = 'proto.access.UserRoles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.Session.displayName = 'proto.access.Session';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.access.Role.repeatedFields_, null);
};
goog.inherits(proto.access.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.Role.displayName = 'proto.access.Role';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.Access = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.Access, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.Access.displayName = 'proto.access.Access';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.TableAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.TableAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.TableAccess.displayName = 'proto.access.TableAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.ColumnAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.ColumnAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.ColumnAccess.displayName = 'proto.access.ColumnAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.access.RecordAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.access.RecordAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.access.RecordAccess.displayName = 'proto.access.RecordAccess';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.RoleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.access.RoleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.RoleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.RoleRequest.toObject = function(includeInstance, msg) {
  var obj = {
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userpass: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientversion: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.RoleRequest}
 */
proto.access.RoleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.RoleRequest;
  return proto.access.RoleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.RoleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.RoleRequest}
 */
proto.access.RoleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserpass(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.RoleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.RoleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.RoleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.RoleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserpass();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientversion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.access.RoleRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.access.RoleRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userPass = 3;
 * @return {string}
 */
proto.access.RoleRequest.prototype.getUserpass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.access.RoleRequest.prototype.setUserpass = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string clientVersion = 7;
 * @return {string}
 */
proto.access.RoleRequest.prototype.getClientversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.access.RoleRequest.prototype.setClientversion = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.access.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.LoginRequest.toObject = function(includeInstance, msg) {
  var obj = {
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userpass: jspb.Message.getFieldWithDefault(msg, 3, ""),
    roleuuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    organizationuuid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    warehouseuuid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    clientversion: jspb.Message.getFieldWithDefault(msg, 7, ""),
    language: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.LoginRequest}
 */
proto.access.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.LoginRequest;
  return proto.access.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.LoginRequest}
 */
proto.access.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserpass(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoleuuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationuuid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarehouseuuid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientversion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserpass();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoleuuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrganizationuuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWarehouseuuid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getClientversion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.access.LoginRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.access.LoginRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userPass = 3;
 * @return {string}
 */
proto.access.LoginRequest.prototype.getUserpass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.access.LoginRequest.prototype.setUserpass = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string roleUuid = 4;
 * @return {string}
 */
proto.access.LoginRequest.prototype.getRoleuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.access.LoginRequest.prototype.setRoleuuid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string organizationUuid = 5;
 * @return {string}
 */
proto.access.LoginRequest.prototype.getOrganizationuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.access.LoginRequest.prototype.setOrganizationuuid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string warehouseUuid = 6;
 * @return {string}
 */
proto.access.LoginRequest.prototype.getWarehouseuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.access.LoginRequest.prototype.setWarehouseuuid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string clientVersion = 7;
 * @return {string}
 */
proto.access.LoginRequest.prototype.getClientversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.access.LoginRequest.prototype.setClientversion = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string language = 8;
 * @return {string}
 */
proto.access.LoginRequest.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.access.LoginRequest.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.LogoutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.access.LogoutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.LogoutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.LogoutRequest.toObject = function(includeInstance, msg) {
  var obj = {
    sessionuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientversion: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.LogoutRequest}
 */
proto.access.LogoutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.LogoutRequest;
  return proto.access.LogoutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.LogoutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.LogoutRequest}
 */
proto.access.LogoutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionuuid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.LogoutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.LogoutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.LogoutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.LogoutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientversion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string sessionUuid = 1;
 * @return {string}
 */
proto.access.LogoutRequest.prototype.getSessionuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.access.LogoutRequest.prototype.setSessionuuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientVersion = 7;
 * @return {string}
 */
proto.access.LogoutRequest.prototype.getClientversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.access.LogoutRequest.prototype.setClientversion = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.access.UserRoles.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.UserRoles.prototype.toObject = function(opt_includeInstance) {
  return proto.access.UserRoles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.UserRoles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.UserRoles.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.access.Role.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.UserRoles}
 */
proto.access.UserRoles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.UserRoles;
  return proto.access.UserRoles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.UserRoles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.UserRoles}
 */
proto.access.UserRoles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.access.Role;
      reader.readMessage(value,proto.access.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.UserRoles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.UserRoles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.UserRoles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.UserRoles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.access.Role.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.access.UserRoles.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.access.UserRoles.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Role roles = 2;
 * @return {!Array<!proto.access.Role>}
 */
proto.access.UserRoles.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.access.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Role, 2));
};


/** @param {!Array<!proto.access.Role>} value */
proto.access.UserRoles.prototype.setRolesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.access.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Role}
 */
proto.access.UserRoles.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.access.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.UserRoles.prototype.clearRolesList = function() {
  this.setRolesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.access.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.Session} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.Session.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    role: (f = msg.getRole()) && proto.access.Role.toObject(includeInstance, f),
    processed: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.Session}
 */
proto.access.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.Session;
  return proto.access.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.Session}
 */
proto.access.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.access.Role;
      reader.readMessage(value,proto.access.Role.deserializeBinaryFromReader);
      msg.setRole(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.Session.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRole();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.access.Role.serializeBinaryToWriter
    );
  }
  f = message.getProcessed();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.access.Session.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.access.Session.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.access.Session.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.access.Session.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.access.Session.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.access.Session.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Role role = 4;
 * @return {?proto.access.Role}
 */
proto.access.Session.prototype.getRole = function() {
  return /** @type{?proto.access.Role} */ (
    jspb.Message.getWrapperField(this, proto.access.Role, 4));
};


/** @param {?proto.access.Role|undefined} value */
proto.access.Session.prototype.setRole = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.access.Session.prototype.clearRole = function() {
  this.setRole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.access.Session.prototype.hasRole = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool processed = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.Session.prototype.getProcessed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.access.Session.prototype.setProcessed = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.access.Role.repeatedFields_ = [6,7,8,9,10,11,12,13,14,15,16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.access.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.Role} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.Role.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    organizationsList: jspb.Message.toObjectList(msg.getOrganizationsList(),
    proto.access.Access.toObject, includeInstance),
    windowsList: jspb.Message.toObjectList(msg.getWindowsList(),
    proto.access.Access.toObject, includeInstance),
    processList: jspb.Message.toObjectList(msg.getProcessList(),
    proto.access.Access.toObject, includeInstance),
    formsList: jspb.Message.toObjectList(msg.getFormsList(),
    proto.access.Access.toObject, includeInstance),
    browsersList: jspb.Message.toObjectList(msg.getBrowsersList(),
    proto.access.Access.toObject, includeInstance),
    workflowsList: jspb.Message.toObjectList(msg.getWorkflowsList(),
    proto.access.Access.toObject, includeInstance),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.access.Access.toObject, includeInstance),
    dashboardsList: jspb.Message.toObjectList(msg.getDashboardsList(),
    proto.access.Access.toObject, includeInstance),
    documentactionsList: jspb.Message.toObjectList(msg.getDocumentactionsList(),
    proto.access.Access.toObject, includeInstance),
    tablesList: jspb.Message.toObjectList(msg.getTablesList(),
    proto.access.TableAccess.toObject, includeInstance),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.access.ColumnAccess.toObject, includeInstance),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.access.RecordAccess.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.Role}
 */
proto.access.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.Role;
  return proto.access.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.Role}
 */
proto.access.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientid(value);
      break;
    case 6:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addOrganizations(value);
      break;
    case 7:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addWindows(value);
      break;
    case 8:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addProcess(value);
      break;
    case 9:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addForms(value);
      break;
    case 10:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addBrowsers(value);
      break;
    case 11:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addWorkflows(value);
      break;
    case 12:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    case 13:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addDashboards(value);
      break;
    case 14:
      var value = new proto.access.Access;
      reader.readMessage(value,proto.access.Access.deserializeBinaryFromReader);
      msg.addDocumentactions(value);
      break;
    case 15:
      var value = new proto.access.TableAccess;
      reader.readMessage(value,proto.access.TableAccess.deserializeBinaryFromReader);
      msg.addTables(value);
      break;
    case 16:
      var value = new proto.access.ColumnAccess;
      reader.readMessage(value,proto.access.ColumnAccess.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 17:
      var value = new proto.access.RecordAccess;
      reader.readMessage(value,proto.access.RecordAccess.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.Role} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClientid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getOrganizationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getWindowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getProcessList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getFormsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getBrowsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getWorkflowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getDashboardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getDocumentactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.access.Access.serializeBinaryToWriter
    );
  }
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.access.TableAccess.serializeBinaryToWriter
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.access.ColumnAccess.serializeBinaryToWriter
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.access.RecordAccess.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.access.Role.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.access.Role.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.access.Role.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.access.Role.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.access.Role.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.access.Role.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.access.Role.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.access.Role.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 clientId = 5;
 * @return {number}
 */
proto.access.Role.prototype.getClientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.access.Role.prototype.setClientid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Access organizations = 6;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getOrganizationsList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 6));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setOrganizationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addOrganizations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearOrganizationsList = function() {
  this.setOrganizationsList([]);
};


/**
 * repeated Access windows = 7;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getWindowsList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 7));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setWindowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addWindows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearWindowsList = function() {
  this.setWindowsList([]);
};


/**
 * repeated Access process = 8;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getProcessList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 8));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setProcessList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addProcess = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearProcessList = function() {
  this.setProcessList([]);
};


/**
 * repeated Access forms = 9;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getFormsList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 9));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setFormsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addForms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearFormsList = function() {
  this.setFormsList([]);
};


/**
 * repeated Access browsers = 10;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getBrowsersList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 10));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setBrowsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addBrowsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearBrowsersList = function() {
  this.setBrowsersList([]);
};


/**
 * repeated Access workflows = 11;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getWorkflowsList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 11));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setWorkflowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addWorkflows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearWorkflowsList = function() {
  this.setWorkflowsList([]);
};


/**
 * repeated Access tasks = 12;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 12));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setTasksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearTasksList = function() {
  this.setTasksList([]);
};


/**
 * repeated Access dashboards = 13;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getDashboardsList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 13));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setDashboardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addDashboards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearDashboardsList = function() {
  this.setDashboardsList([]);
};


/**
 * repeated Access documentActions = 14;
 * @return {!Array<!proto.access.Access>}
 */
proto.access.Role.prototype.getDocumentactionsList = function() {
  return /** @type{!Array<!proto.access.Access>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.Access, 14));
};


/** @param {!Array<!proto.access.Access>} value */
proto.access.Role.prototype.setDocumentactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.access.Access=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.Access}
 */
proto.access.Role.prototype.addDocumentactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.access.Access, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearDocumentactionsList = function() {
  this.setDocumentactionsList([]);
};


/**
 * repeated TableAccess tables = 15;
 * @return {!Array<!proto.access.TableAccess>}
 */
proto.access.Role.prototype.getTablesList = function() {
  return /** @type{!Array<!proto.access.TableAccess>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.TableAccess, 15));
};


/** @param {!Array<!proto.access.TableAccess>} value */
proto.access.Role.prototype.setTablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.access.TableAccess=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.TableAccess}
 */
proto.access.Role.prototype.addTables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.access.TableAccess, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearTablesList = function() {
  this.setTablesList([]);
};


/**
 * repeated ColumnAccess columns = 16;
 * @return {!Array<!proto.access.ColumnAccess>}
 */
proto.access.Role.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.access.ColumnAccess>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.ColumnAccess, 16));
};


/** @param {!Array<!proto.access.ColumnAccess>} value */
proto.access.Role.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.access.ColumnAccess=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.ColumnAccess}
 */
proto.access.Role.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.access.ColumnAccess, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * repeated RecordAccess records = 17;
 * @return {!Array<!proto.access.RecordAccess>}
 */
proto.access.Role.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.access.RecordAccess>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.access.RecordAccess, 17));
};


/** @param {!Array<!proto.access.RecordAccess>} value */
proto.access.Role.prototype.setRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.access.RecordAccess=} opt_value
 * @param {number=} opt_index
 * @return {!proto.access.RecordAccess}
 */
proto.access.Role.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.access.RecordAccess, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.access.Role.prototype.clearRecordsList = function() {
  this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.Access.prototype.toObject = function(opt_includeInstance) {
  return proto.access.Access.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.Access} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.Access.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isreadonly: jspb.Message.getFieldWithDefault(msg, 2, false),
    action: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.Access}
 */
proto.access.Access.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.Access;
  return proto.access.Access.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.Access} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.Access}
 */
proto.access.Access.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreadonly(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.Access.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.Access.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.Access} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.Access.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsreadonly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.access.Access.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.access.Access.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isReadOnly = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.Access.prototype.getIsreadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.access.Access.prototype.setIsreadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string action = 3;
 * @return {string}
 */
proto.access.Access.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.access.Access.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.TableAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.access.TableAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.TableAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.TableAccess.toObject = function(includeInstance, msg) {
  var obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isexclude: jspb.Message.getFieldWithDefault(msg, 2, false),
    iscanreport: jspb.Message.getFieldWithDefault(msg, 3, false),
    iscanexport: jspb.Message.getFieldWithDefault(msg, 4, false),
    accesstyperules: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.TableAccess}
 */
proto.access.TableAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.TableAccess;
  return proto.access.TableAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.TableAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.TableAccess}
 */
proto.access.TableAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsexclude(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscanreport(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscanexport(value);
      break;
    case 5:
      var value = /** @type {!proto.access.TableAccess.AccessTypeRule} */ (reader.readEnum());
      msg.setAccesstyperules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.TableAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.TableAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.TableAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.TableAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsexclude();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIscanreport();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIscanexport();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAccesstyperules();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.access.TableAccess.AccessTypeRule = {
  ACCESSING: 0,
  EXPORTING: 1,
  REPORTING: 2
};

/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.access.TableAccess.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.access.TableAccess.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isExclude = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.TableAccess.prototype.getIsexclude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.access.TableAccess.prototype.setIsexclude = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool isCanReport = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.TableAccess.prototype.getIscanreport = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.access.TableAccess.prototype.setIscanreport = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool isCanExport = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.TableAccess.prototype.getIscanexport = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.access.TableAccess.prototype.setIscanexport = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional AccessTypeRule accessTypeRules = 5;
 * @return {!proto.access.TableAccess.AccessTypeRule}
 */
proto.access.TableAccess.prototype.getAccesstyperules = function() {
  return /** @type {!proto.access.TableAccess.AccessTypeRule} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.access.TableAccess.AccessTypeRule} value */
proto.access.TableAccess.prototype.setAccesstyperules = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.ColumnAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.access.ColumnAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.ColumnAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.ColumnAccess.toObject = function(includeInstance, msg) {
  var obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isexclude: jspb.Message.getFieldWithDefault(msg, 3, false),
    isreadonly: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.ColumnAccess}
 */
proto.access.ColumnAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.ColumnAccess;
  return proto.access.ColumnAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.ColumnAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.ColumnAccess}
 */
proto.access.ColumnAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsexclude(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreadonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.ColumnAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.ColumnAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.ColumnAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.ColumnAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsexclude();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsreadonly();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.access.ColumnAccess.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.access.ColumnAccess.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string columnName = 2;
 * @return {string}
 */
proto.access.ColumnAccess.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.access.ColumnAccess.prototype.setColumnname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isExclude = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.ColumnAccess.prototype.getIsexclude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.access.ColumnAccess.prototype.setIsexclude = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool isReadOnly = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.ColumnAccess.prototype.getIsreadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.access.ColumnAccess.prototype.setIsreadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.access.RecordAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.access.RecordAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.access.RecordAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.RecordAccess.toObject = function(includeInstance, msg) {
  var obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recordid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recorduuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isexclude: jspb.Message.getFieldWithDefault(msg, 4, false),
    isreadonly: jspb.Message.getFieldWithDefault(msg, 5, false),
    isdependententities: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.access.RecordAccess}
 */
proto.access.RecordAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.access.RecordAccess;
  return proto.access.RecordAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.access.RecordAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.access.RecordAccess}
 */
proto.access.RecordAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecordid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecorduuid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsexclude(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreadonly(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdependententities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.access.RecordAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.access.RecordAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.access.RecordAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.access.RecordAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecordid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRecorduuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsexclude();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsreadonly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsdependententities();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.access.RecordAccess.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.access.RecordAccess.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 recordId = 2;
 * @return {number}
 */
proto.access.RecordAccess.prototype.getRecordid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.access.RecordAccess.prototype.setRecordid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string recordUuid = 3;
 * @return {string}
 */
proto.access.RecordAccess.prototype.getRecorduuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.access.RecordAccess.prototype.setRecorduuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool isExclude = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.RecordAccess.prototype.getIsexclude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.access.RecordAccess.prototype.setIsexclude = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool isReadOnly = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.RecordAccess.prototype.getIsreadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.access.RecordAccess.prototype.setIsreadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool isDependentEntities = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.access.RecordAccess.prototype.getIsdependententities = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.access.RecordAccess.prototype.setIsdependententities = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


goog.object.extend(exports, proto.access);
